"""
Implementation of Gaussian quadrature.

For implementation details see
http://www-2.rotman.utoronto.ca/~hull/TechnicalNotes/TechnicalNote21.pdf.
"""

import numpy as np


def calc(f_k) -> float:
    """
    Apply Gaussian quadrature on a single variable function.

    Parameters
    ----------
    f_k : function
        Function f(k) of a single float parameter k returning float as output.
        Please note that Gaussian quadrature assumes that k follows a standard
        normal distribution.

    Returns
    -------
    float
        Approximation of integral of function f(k) with standardized normal
        distribution being used as a weight.

    Example
    -------
    f_k = (lambda x: 1.0)
    cdf = calc(f_k=f_k)  # calculate CDF of normal distribution
    """
    # %% values of F_k and w_k of Hermite Gauss integration table with M = 100
    Fks =\
        np.array([18.959636217387700, 18.135591526882400, 17.455587403854000,
                  16.850442196467600, 16.293741917527300, 15.771881535163700,
                  15.276703662151500, 14.802835582736900, 14.346503542605000,
                  13.904929311071100, 13.475992702828000, 13.058029050047000,
                  12.649700802354100, 12.249912458199600, 11.857752129524900,
                  11.472450168771100, 11.093349113832600, 10.719881366627300,
                  10.351552293165600, 9.987927210085180, 9.628621212533110,
                  9.273291115831670, 8.921628994317100, 8.573356943970480,
                  8.228222794639790, 7.885996567552100, 7.546467523878240,
                  7.209441686494350, 6.874739743881410, 6.542195265083630,
                  6.211653169712590, 5.882968408463870, 5.556004818445110,
                  5.230634124469990, 4.906735062838060, 4.584192608352100,
                  4.262897288685350, 3.942744572897090, 3.623634323055130,
                  3.305470299669280, 2.988159713057190, 2.671612813919010,
                  2.355742517341310, 2.040464055223490, 1.725694652752920,
                  1.411353225072270, 1.097360090703810, 0.783636698635240,
                  0.470105366242464, 0.156689025434773, 0.156689025434773,
                  -0.470105366242464, -0.783636698635240, -1.097360090703810,
                  -1.411353225072270, -1.725694652752920, -2.040464055223490,
                  -2.355742517341310, -2.671612813919010, -2.988159713057190,
                  -3.305470299669280, -3.623634323055130, -3.942744572897090,
                  -4.262897288685350, -4.584192608352100, -4.906735062838060,
                  -5.230634124469990, -5.556004818445110, -5.882968408463870,
                  -6.211653169712590, -6.542195265083630, -6.874739743881410,
                  -7.209441686494350, -7.546467523878240, -7.885996567552100,
                  -8.228222794639790, -8.573356943970480, -8.921628994317100,
                  -9.273291115831670, -9.628621212533110, -9.987927210085180,
                  -10.35155229316560, -10.719881366627300, -11.093349113832600,
                  -11.47245016877110, -11.857752129524900, -12.249912458199600,
                  -12.64970080235410, -13.058029050047000, -13.475992702828000,
                  -13.90492931107110, -14.346503542605000, -14.802835582736900,
                  -15.27670366215150, -15.771881535163700, -16.293741917527300,
                  -16.85044219646760, -17.455587403854000, -18.135591526882400,
                  -18.95963621738770], float)

    wks =\
        np.array([3.33327034834394E-79, 1.11306738613898E-72,
                  1.73941284193562E-67, 5.08855127544545E-63,
                  4.80626509819129E-59, 1.95180141627277E-55,
                  4.05738601306275E-52, 4.85065602719810E-49,
                  3.62250627967984E-46, 1.79706674800512E-43,
                  6.20874096187055E-41, 1.55083579916783E-38,
                  2.88652514240145E-36, 4.10423808392596E-34,
                  4.55156238600384E-32, 4.00676848243852E-30,
                  2.84226930006637E-28, 1.64593852253974E-26,
                  7.86955059707856E-25, 3.13747348559491E-23,
                  1.05221226164910E-21, 2.99151155919949E-20,
                  7.26017729862866E-19, 1.51343413730626E-17,
                  2.72494277875588E-16, 4.25900898579591E-15,
                  5.80480522426783E-14, 6.92756267692289E-13,
                  7.26621923089045E-12, 6.72119409100814E-11,
                  5.49967563267811E-10, 3.99212497424104E-09,
                  2.57728995660516E-08, 1.48330941446547E-07,
                  7.62669876239514E-07, 3.51011949597411E-06,
                  1.44862216702745E-05, 5.36948410458688E-05,
                  0.000179012825005966, 0.000537499009106446,
                  0.001455199106448600, 0.003556087106238590,
                  0.007851073365392560, 0.015672694311189900,
                  0.028308670858648700, 0.046292786325185600,
                  0.068570466182807300, 0.092036263973497700,
                  0.111970672834610000, 0.123496941528610000,
                  0.123496941528610000, 0.111970672834610000,
                  0.092036263973497700, 0.068570466182807300,
                  0.046292786325185600, 0.028308670858648700,
                  0.015672694311189900, 0.007851073365392560,
                  0.003556087106238590, 0.001455199106448600,
                  0.000537499009106446, 0.000179012825005966,
                  5.36948410458688E-05, 1.44862216702745E-05,
                  3.51011949597411E-06, 7.62669876239514E-07,
                  1.48330941446547E-07, 2.57728995660516E-08,
                  3.99212497424104E-09, 5.49967563267811E-10,
                  6.72119409100814E-11, 7.26621923089045E-12,
                  6.92756267692289E-13, 5.80480522426783E-14,
                  4.25900898579591E-15, 2.72494277875588E-16,
                  1.51343413730626E-17, 7.26017729862866E-19,
                  2.99151155919949E-20, 1.05221226164910E-21,
                  3.13747348559491E-23, 7.86955059707856E-25,
                  1.64593852253974E-26, 2.84226930006637E-28,
                  4.00676848243852E-30, 4.55156238600384E-32,
                  4.10423808392596E-34, 2.88652514240145E-36,
                  1.55083579916783E-38, 6.20874096187055E-41,
                  1.79706674800512E-43, 3.62250627967984E-46,
                  4.85065602719810E-49, 4.05738601306275E-52,
                  1.95180141627277E-55, 4.80626509819129E-59,
                  5.08855127544545E-63, 1.73941284193562E-67,
                  1.11306738613898E-72, 3.33327034834394E-79], float)

    # %% approximate integral
    integral_approx = [f_k(Fk) * wk for Fk, wk in zip(Fks, wks)]
    integral_approx = np.sum(integral_approx)

    # %% return result
    return integral_approx
